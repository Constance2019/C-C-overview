今日任务：
1、大小端
2、移位操作
3、柔性数组

--------------------------------------------------------------------------------------------
作业:
1.编写函数：
unsigned int  reverse_bit(unsigned int value);
这个函数的返回值是value的二进制位模式从左到右翻转后的值。

如：
在32位机器上25这个值包含下列各位：
00000000000000000000000000011001
翻转后：（2550136832）
10011000000000000000000000000000
程序结果返回：
          2550136832
方法一：
unsigned int reverse_bit(unsigned int value)
{
	unsigned int result=0,a=0x1;
	unsigned int tmp=0;
	for(int i=0; i<32; i++)
	{
		tmp = value & a;  //在value中每次取出同a的位数  							
		tmp <<= ((32-i-1-i)); //一次性左移到位
		result |= tmp;     //result 或上 
		a <<= 1;    //每次a左移一次
	}
	return result;
}
方法二：
unsigned int reverse_bit(unsigned int value)
{
	unsigned int ret =0 ;
	for(int i=0;i<32;i++)
	{
		int r=value & 1;   //取出value的最后一位    
		ret |= (r<<(32-i-1));  //一次性移够，再或上ret
		value >>= 1;  //value 每次右移一位
	}
	return ret;
}
方法三：
unsigned int reverse_bit(unsigned int value)
{
	unsigned int tmp=0,result=0;
	unsigned int a = 0x01;
	for(int i=0;i<31;i++)
	{
		tmp = value & 0x1;
		result |= tmp;
		result <<= 1;
		value >>= 1;
	}
	return result;
}
测试主函数
void main()
{
	unsigned int value=25;
	unsigned int result;
	result=reverse_bit(value);
	cout<<result<<endl;
}
2.不使用（a+b）/2这种方式，求两个数的平均值。
int Avg(int a,int b)
{
	return ((a+b)>>1);
}
3.编程实现：
一组数据中只有一个数字出现了一次。其他所有数字都是成对出现的。
请找出这个数字。（使用位运算）

int Unqiue(int ar[],int n)
{
	//cout<<sizeof(ar)<<endl;//ar退化成指针
	assert((ar != NULL) && n!=0);
	int result=ar[0];
	for(int i=1;i<n;i++)
	{
		result^=ar[i];
	}
	return result;
}

void main()
{
	int ar[]={1,2,3,4,5,6,4,3,2,1,5};
	int n=sizeof(ar)/sizeof(int);
	int ret=Unqiue(ar,n);
	cout<<ret<<endl;
}
4.请编码实现以下功能的函数
功能：实现对一个8 bit数据（unsigned char类型）的指定位（例如第n位）的置0或者置1操作，并保持其他位不变。
函数原型：
 void bit_set(unsigned char *p_data, unsigned char position, bool flag)
 函数参数说明：
 P_data 是指定的源数据，position是指定位（取值范围1~8）；flag表示是置0还是置1操作，true: 置1  flase:置0

/*
void bit_set(unsigned char* p,unsigned int position,bool flag)
{
	if(flag)
	{
		*p  |=    (0x1 <<(position-1));
	}
	else 
		*p &= ~(0x1 <<(position -1));
}
void main()
{
	unsigned char a='A';
	bit_set(&a,4,true);
	cout<<(int)a<<endl;
}


5.给出一个unsigned short value，求出value的各四位之和。
如：value = 10, 其二进制位 0000 0000 0000 1010，
其和Sum = 0000 + 0000 + 0000 + 1010,即 0+0+0+10 = 10
short Bit_Sum(short value)
{
	short result =0;
	for(int i=0;i<4;i++)
	{
		result += (value & 0xf);
		value>>=4;
	}
	return result;
}
void main()
{
	short a=25;        //0000 0000 0001 1001
	int ret= Bit_Sum(a);
	cout<<ret<<endl;   //10
}
6.char SmallInt(unsigned long value)
{
	//????????
}
void main()
{
	//char ch = 7491491;
	unsigned long value = 7491491
	cout<<SmallInt(value)<<endl;
}

解：char SmallInt(long value)
{
	value %= 256;
	while(value >127)
		value -=256;
	while(value <-128)
		value +=256;
	return value;
}
void main()
{
	char ch=7491491;
	unsigned long value=7491491;
	cout<<(int)SmallInt(value)<<endl;
}
7.华为的试卷做完
